{"version":3,"sources":["gulp-jsdoc.js"],"names":["jsdoc","os","require","type","debug","config","done","files","jsdocConfig","arguments","length","undefined","JSON","stringify","file","callback","push","path","on","resolve","reject","errMsg","log","colors","red","beep","Error","tmpobj","fileSync","join","writeFile","name","err","spawn","cmd","inkdocstrap","dirname","templatePath","opts","template","args","templates","default","layoutFile","concat","child","process","execPath","cwd","stdout","setEncoding","stderr","data","code","error","asCallback"],"mappings":"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","file":"gulp-jsdoc.js","sourcesContent":["import map from 'map-stream';\nimport tmp from 'tmp';\nimport fs from 'fs';\nimport path from 'path';\nimport gutil from 'gulp-util';\nimport Promise from 'bluebird';\nlet os = require('os').type();\n\nlet debug = require('debug')('gulp-jsdoc3');\n\n/**\n * @callback gulpDoneCallback\n */\n\n/**\n * A wrapper around jsdoc cli.\n *\n * This function collects all filenames. Then runs:\n * ```jsdoc -c config -t node_modules/ink-docstrap/template gulpFile1 gulpFile2```\n * @example\n * gulp.src(['README.md', 'src/*.js']), {read: false}).pipe(\n *     jsdoc(options, cb)\n * );\n *\n * @param {Object} [config=require('./jsdocConfig.json')]\n * @param {gulpDoneCallback} done\n * @returns {*|SignalBinding}\n */\nexport function jsdoc(config, done) {\n    let files = [];\n    let jsdocConfig;    \n\n    // User just passed callback\n    if (arguments.length === 1 && typeof config === 'function') {\n        done = config;\n        config = undefined;\n    }\n\n    // Prevent some errors\n    if (typeof done !== 'function') {\n        done = function () {\n        };\n    }\n\n    jsdocConfig = config || require('./jsdocConfig.json');\n\n    debug('Config:\\n' + JSON.stringify(jsdocConfig, undefined, 2));\n\n    return map(function (file, callback) {\n        files.push(file.path);\n        callback(null, file);\n    }).on('end', function () {\n        // We use a promise to prevent multiple dones (normal cause error then close)\n        new Promise(function (resolve, reject) {\n            if (files.length === 0) {\n                const errMsg = 'JSDoc Error: no files found to process';\n                gutil.log(gutil.colors.red(errMsg));\n                gutil.beep();\n                reject(new Error(errMsg));\n            }\n\n            const tmpobj = tmp.fileSync();\n            debug('Documenting files: ' + files.join(' '));\n            fs.writeFile(tmpobj.name, JSON.stringify(jsdocConfig), 'utf8', function (err) {\n                // We couldn't write the temp file\n                if (err) {\n                    reject(err);\n                }\n\n                const spawn = require('child_process').spawn,\n                    cmd = require.resolve('jsdoc/jsdoc.js'), // Needed to handle npm3 - find the binary anywhere\n                    inkdocstrap = path.dirname(require.resolve('ink-docstrap')),\n                    templatePath = jsdocConfig.opts && jsdocConfig.opts.template || inkdocstrap;\n                \n                let args = ['-c', tmpobj.name];\n                \n                // Config + ink-docstrap if user did not specify their own layout\n                if(!jsdocConfig.templates || \n                    !jsdocConfig.templates.default || \n                    !jsdocConfig.templates.default.layoutFile){\n                    args = args.concat(['-t', templatePath]);\n                }    \n\n                args = args.concat(files);\n\n                debug(cmd + ' ' + args.join(' '));\n\n                const child = os === 'Windows_NT'\n                    ? spawn(process.execPath, [cmd].concat(args), {cwd: process.cwd()})\n                    : spawn(cmd, args, {cwd: process.cwd()}); // unix\n                child.stdout.setEncoding('utf8');\n                child.stderr.setEncoding('utf8');\n                child.stdout.on('data', function (data) {\n                    gutil.log(data);\n                });\n                child.stderr.on('data', function (data) {\n                    gutil.log(gutil.colors.red(data));\n                    gutil.beep();\n                });\n                child.on('close', function (code) {\n                    if (code === 0) {\n                        gutil.log('Documented ' + files.length + ' files!');\n                        resolve();\n                    } else {\n                        gutil.log(gutil.colors.red('JSDoc returned with error code: ' + code));\n                        gutil.beep();\n                        reject(new Error('JSDoc closed with error code: ' + code));\n                    }\n                });\n                child.on('error', function (error) {\n                    gutil.log(gutil.colors.red('JSDoc Error: ' + error));\n                    gutil.beep();\n                    reject(new Error(error));\n                });\n            });\n        }).asCallback(done);\n    });\n}\n"]}